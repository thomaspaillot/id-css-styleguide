{
  "name": "gulp-mustache",
  "version": "1.0.1",
  "description": "A plugin for Gulp that renders mustache templates into html",
  "keywords": [
    "gulpplugin",
    "gulp",
    "mustache"
  ],
  "homepage": "https://github.com/rogeriopvl/gulp-mustache",
  "bugs": {
    "url": "https://github.com/rogeriopvl/gulp-mustache/issues"
  },
  "author": {
    "name": "RogÃ©rio Vicente",
    "url": "https://github.com/rogeriopvl"
  },
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/rogeriopvl/gulp-mustache.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "gulp-util": "^3.0.1",
    "mustache": "^0.8.2",
    "through2": "^1.1.1"
  },
  "devDependencies": {
    "mocha": "^2.0.0",
    "should": "^4.1.0"
  },
  "engines": {
    "npm": ">=1.2.10"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "readme": "# gulp-mustache [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][depstat-image]][depstat-url]\n\n> mustache plugin for [gulp](https://github.com/wearefractal/gulp)\n\n## Usage\n\nFirst, install `gulp-mustache` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-mustache\n```\n\nThen, add it to your `gulpfile.js`:\n\n```javascript\nvar mustache = require(\"gulp-mustache\");\n\ngulp.src(\"./templates/*.mustache\")\n\t.pipe(mustache({\n\t\tmsg: \"Hello Gulp!\"\n\t}))\n\t.pipe(gulp.dest(\"./dist\"));\n```\n\nYou may also pass in an object representing mustache partials and their contents\nas a third argument to the call to `mustache()` like so:\n\n```javascript\ngulp.src(\"./templates/*.mustache\")\n\t.pipe(mustache({\n\t\tmsg: \"Hello Gulp!\",\n\t\tnested_value: \"I am nested.\",\n\t\tanother_value: \"1 2 3\"\n\t},{},{\n\t\tsome_inner_partial: \"<p>{{nested_value}}</p>\",\n\t\tanother_partial: \"<div>{{another_value}}</div>\"\n\t})).pipe(gulp.dest(\"./dist\"));\n```\n\n## API\n\n### mustache(view, options, partials)\n\n#### view\nType: `hash` or `string`\nDefault: `undefined`\n\nThe view object, containing all template variables as keys. If you pass a `string` it will be used as the path to a JSON file containing view variables.\n\nAs of `v1.0.1`, `file.data` is supported as a way of passing data into mustache. See [this](https://github.com/colynb/gulp-data#note-to-gulp-plugin-authors).\n\n#### options\nType: `hash`\nDefault: `{ }`\n\nThe options object to configure the plugin.\n\n##### options.extension\nType: `string`\nDefault: the extension of the current file\n\n#### partials\nType: `hash`\nDefault: `{ }`\n\nAn optional object of mustache partial strings. See [mustache.js](https://github.com/janl/mustache.js/) for details on partials in mustache.\n\n## License\n\n[MIT License](http://en.wikipedia.org/wiki/MIT_License)\n\n[npm-url]: https://npmjs.org/package/gulp-mustache\n[npm-image]: https://badge.fury.io/js/gulp-mustache.png\n\n[travis-url]: http://travis-ci.org/rogeriopvl/gulp-mustache\n[travis-image]: https://secure.travis-ci.org/rogeriopvl/gulp-mustache.png?branch=master\n\n[depstat-url]: https://david-dm.org/rogeriopvl/gulp-mustache\n[depstat-image]: https://david-dm.org/rogeriopvl/gulp-mustache.png\n",
  "readmeFilename": "README.md",
  "_id": "gulp-mustache@1.0.1",
  "dist": {
    "shasum": "cedd91012dd0fadfd53f0232a94fd2561a3b8cc3"
  },
  "_from": "gulp-mustache@^1.0.0",
  "_resolved": "https://registry.npmjs.org/gulp-mustache/-/gulp-mustache-1.0.1.tgz"
}
